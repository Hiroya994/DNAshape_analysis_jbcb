
## SVM for single/multi data

## written for R
## this code conducted SVM with LOOCV 10 times
## calculate AUC and draw ROC curve

svm_ROC_curve_loo_sm <- function(file_name, sm) {
	
	##### library import #####
	
	library(tidyverse)
	library(e1071)
	library(pROC)
	
	##### import data #####
	
	all <- read.csv(file_name, header = T)
	
	positive_all  <- all %>% dplyr::filter(Bind_type == "T_multi")
	negative_all  <- all %>% dplyr::filter(Bind_type == "FP")
	
	## number of sample
	
	n_data  <- nrow(positive_all) 	  # number of data
	
	##### preparing and deciding values #####
	
	a_table_name	   <- paste("svm_table_all_", sm, ".csv", sep = "")
	s_table_name	   <- paste("svm_table_spe_", sm, ".csv", sep = "")
	parameters_name	   <- paste("svm_parameters_", sm, ".csv", sep = "")
	auc_name	   <- paste("svm_auc_data_", sm, ".csv", sep = "")
	
	a_data <- data.frame(matrix(rep(NA, 5), nrow=1))[numeric(0), ]　# vacant data.frame
	colnames(a_data) <- c("Gene_ID", 
					  "ED",
					  "ida",
					  "estimate",
					  "times")
	
	s_data <- data.frame(matrix(rep(NA, 6), nrow=1))[numeric(0), ]　# vacant data.frame
	colnames(s_data) <- c("Gene_ID", 
					  "ED",
					  "ida",
					  "estimate_spe",
					  "parameters",
					  "times_spe")
	
	w_data <- data.frame(matrix(rep(NA, 3), nrow=1))[numeric(0), ]　# vacant data.frame
	colnames(w_data) <- c("parameters", "AUC_all", "AUC_spe")
	
	z_data <- data.frame(matrix(rep(NA, 4), nrow=1))[numeric(0), ]　# vacant data.frame
	colnames(z_data) <- c("parameters", "AUC_all", "AUC_spe")
	
	## data making
	
	positive_ordered  <- positive_all[order(positive_all$ED, decreasing = T),] %>% dplyr::slice(1:n_data)
	positive <- positive_ordered %>% dplyr::select(-Gene_ID, -ED, -Gene_type, -motif_num, -distance)
	
	negative_ordered  <- negative_all[order(negative_all$ED),] %>% dplyr::slice(1:n_data)
	negative <- negative_ordered %>% dplyr::select(-Gene_ID, -ED, -Gene_type, -motif_num, -distance)
	
	all_data <- rbind(positive, negative)
	
	obj <- tune(svm, factor(Bind_type) ~., data = all_data,
			ranges = list(gamma = 10^(seq(-5, 5, 0.1)), cost = 10^(seq(-2, 2, 0.1))),
			tunecontrol = tune.control(sampling = "cross", cross = 10))
	
	for (g in 1:10){
		
		times <- g
		
		positive <- positive_ordered[sample(n_data, n_data),] %>% 
				dplyr::select(-Gene_type, -motif_num, -distance)
		negative <- negative_ordered[sample(n_data, n_data),] %>% 
			    dplyr::select(-Gene_type, -motif_num, -distance)
		
		for (i in 1:n_data) {
			
			train_p <- positive[-i,] ## extract data one by one
			valid_p <- positive[i,]
			train_n <- negative[-i,]
			valid_n <- negative[i,]
			train  <- rbind(train_p, train_n)
			valid  <- rbind(valid_p, valid_n)
			
			Gene_ID <- valid %>% dplyr::select(Gene_ID)　## for raw data
			ED <- valid %>% dplyr::select(ED)           ## for raw data
			
			trainX  <- train %>% dplyr::select(-Gene_ID, -ED)
			validX  <- valid %>% dplyr::select(-Gene_ID, -ED)
			
			model <- svm(formula  = factor(Bind_type) ~., data=trainX, kernel = "linear", 
						gamma = obj$best.parameters$gamma, 
						cost  = obj$best.parameters$cost,
						probability = TRUE)
			
			estimate <- data.frame(predict(model, validX))　##  for raw data、estimated value
			names(estimate) <- "estimate" ## for raw data、estimated value
			ida <- validX$Bind_type　## for raw data、original value
			pred <- predict(model, validX, probability = TRUE)
			
			AAA <- data.frame("Gene_ID"  = Gene_ID,
						  "ED"       = ED, 
						  "ida"      = ida, 
						  "estimate" = estimate,
						  "times"	 = g)
			
			a_data <- a_data %>% rbind(AAA)
			
			if (i == 1) {
				predictions <- attr(pred, "probabilities") %>% cbind(Gene_ID) %>% cbind(times)
				roc_valid <- validX
				pre_coef_table <- abs(coef(model)) ## calculate the abs of coefficient
			
			}else{
				pre_pred <- attr(pred, "probabilities") %>% cbind(Gene_ID) %>% cbind(times)
				predictions <- rbind(predictions, pre_pred)
				
				pre_roc <- validX
				roc_valid <- rbind(roc_valid, pre_roc)
				pre_coef_table <- cbind(pre_coef_table, abs(coef(model)))
			}
		}
		
		if (g == 1) {
			predictions_sum <- predictions
			coef_table_all <- pre_coef_table ## calculate the abs of coefficient
		
		}else{
			predictions_sum <- predictions_sum %>% rbind(predictions)
			coef_table_all <- cbind(coef_table_all, pre_coef_table)
		}
	}
	
	##### specific #####
	
	## calculate the average of coefficient
	
	coef_mean  <- rowMeans(coef_table_all)
	coef_table <- cbind(pre_coef_table, coef_mean) %>% as.data.frame()
	
	## ordered by average and filter with the value
	
	for (m in 2:10) {
		
		parameters <- m
		
		coef_table_spe  <- coef_table[order(coef_table$coef_mean, decreasing = T),] %>% dplyr::slice(1:m)
		
		## obtain the selected names
		
		cname <- rownames(coef_table_spe)
		
		## create new dataframe for specific dataset
		
		pre_positive_spe <- positive %>% dplyr::select(Gene_ID, all_of(cname), ED, Bind_type)
		pre_negative_spe <- negative %>% dplyr::select(Gene_ID, all_of(cname), ED, Bind_type)
		
		all_data_spe <- rbind(pre_positive_spe, pre_negative_spe) %>% dplyr::select(-Gene_ID, -ED)
		
		obj_spe <- tune(svm, factor(Bind_type) ~., data = all_data_spe,
					ranges = list(gamma = 10^(seq(-5, 5, 0.1)), cost = 10^(seq(-2, 2, 0.1))),
					tunecontrol = tune.control(sampling = "cross", cross = 10))
		
		for (n in 1:10) {
			
			times_spe <- n
			
			## data making
			
			positive_spe <- pre_positive_spe[sample(n_data, n_data),]
			negative_spe <- pre_negative_spe[sample(n_data, n_data),]
			
			for (j in 1:n_data) {
				
				train_p_spe <- positive_spe[-j,]
				valid_p_spe <- positive_spe[j,]
				train_n_spe <- negative_spe[-j,]
				valid_n_spe <- negative_spe[j,]
				train_spe  <- rbind(train_p_spe, train_n_spe)
				valid_spe  <- rbind(valid_p_spe, valid_n_spe)
				
				Gene_ID <- valid_spe %>% dplyr::select(Gene_ID)　## for raw data
				ED <- valid_spe %>% dplyr::select(ED)           ## for raw data
				
				trainX_spe <- train_spe %>% dplyr::select(-Gene_ID, -ED) ## for training data
				validX_spe <- valid_spe %>% dplyr::select(-Gene_ID, -ED) ## for validation data
				
				model_spe <- svm(formula = factor(Bind_type) ~., data=trainX_spe, kernel = "linear",
						gamma = obj_spe$best.parameters$gamma, 
						cost  = obj_spe$best.parameters$cost, 
						probability = TRUE)
				
				estimate_spe <- data.frame(predict(model_spe, validX_spe))　## for raw data、estimated value
				names(estimate_spe) <- "estimate_spe" ## for raw data、estimated value
				ida_spe <- validX_spe$Bind_type　## for raw data、original value
				pred_spe <- predict(model_spe, validX_spe, probability = TRUE)
				
				SSS <- data.frame("Gene_ID"  = Gene_ID,
						  "ED"       = ED, 
						  "ida"      = ida_spe, 
						  "estimate_spe" = estimate_spe,
						  "parameters" = m,
						  "times_spe" = times_spe)
				
				s_data <- s_data %>% rbind(SSS)
				
				if (j == 1) {
					predictions_spe <- attr(pred_spe, "probabilities") %>%
									cbind(Gene_ID) %>% cbind(times_spe) %>% cbind(parameters) 
					roc_valid_spe <- validX_spe
				
				}else{
					pre_predictions_spe <- attr(pred_spe, "probabilities") %>%
										cbind(Gene_ID) %>% cbind(times_spe) %>% cbind(parameters) 
					predictions_spe <- rbind(predictions_spe, pre_predictions_spe)
					pre_roc_spe <- validX_spe
					roc_valid_spe <- rbind(roc_valid_spe, pre_roc_spe)
				}
			}
			
			if (n == 1) {
				pre_predictions_spe_sum <- predictions_spe
			
			}else{
				pre_predictions_spe_sum <- pre_predictions_spe_sum %>% rbind(predictions_spe)
			}
		}
		
		if (m == 2) {
			predictions_spe_sum <- pre_predictions_spe_sum
		
		}else{
			predictions_spe_sum <- predictions_spe_sum %>% rbind(pre_predictions_spe_sum)
		}
	}
	
	for (m in 2:10) {
		
		roc_curve_name <- paste("svm_ROC_linear_", sm, "_", m, ".png", sep = "")
		png(roc_curve_name, width = 1000, height = 1000)
		
		for (o in 1:10) {
			prediction_table <- data.frame(predictions_sum) %>% dplyr::filter(times == o)
			prediction_table_spe <- data.frame(predictions_spe_sum) %>% dplyr::filter(times_spe == o, parameters == m)
			roc_valid_table <- data.frame(roc_valid)
			roc_valid_table_spe <- data.frame(roc_valid_spe)
			
			roc.curve <- roc(response = roc_valid_table$Bind_type, predictor=prediction_table[,1], levels = c("FP","T_multi"))
			a <- auc(roc.curve)　## auc value, all
			
			roc.curve.spe <- roc(response = roc_valid_table_spe$Bind_type, predictor=prediction_table_spe[,1], levels = c("FP","T_multi"))
			b <- auc(roc.curve.spe) ## auc value, specific
			
			CCC <- data.frame("parameters" = m, "AUC_all" = a, "AUC_spe" = b)
			w_data <- w_data %>% rbind(CCC)
			
			plot(roc.curve, legacy.axes = TRUE, col = "LightSlateGray", cex = 2.0)
			par(new = T)
			plot(roc.curve.spe, legacy.axes = TRUE, col = "SandyBrown", cex = 2.0)
			par(new = T)
		}
		
		prediction_mean <- predictions_sum %>% group_by(Gene_ID) %>%
									summarize(T_multi = mean(T_multi), FP = mean(FP)) %>% as.data.frame
		prediction_mean_spe <- predictions_spe_sum %>% group_by(Gene_ID) %>% dplyr::filter(parameters == m) %>%
									summarize(T_multi = mean(T_multi), FP = mean(FP)) %>% as.data.frame
		
		roc.curve <- roc(response = roc_valid_table$Bind_type, predictor=prediction_mean[,2], levels = c("FP","T_multi"))
		a <- auc(roc.curve)　## auc value, all
		
		roc.curve.spe <- roc(response = roc_valid_table_spe$Bind_type, predictor=prediction_mean_spe[,2], levels = c("FP","T_multi"))
		b <- auc(roc.curve.spe) ## auc value, specific
		
		plot(roc.curve, legacy.axes = TRUE, col = "Black", cex = 2.0, lwd = 4)
		par(new = T)
		plot(roc.curve.spe, legacy.axes = TRUE, col = "OrangeRed", cex = 2.0, lwd = 4)
		
		dev.off()
		
		DDD <- data.frame("parameters" = m, "AUC_all" = a, "AUC_spe" = b)
		z_data <- z_data %>% rbind(DDD)
	}
	write.csv(a_data, a_table_name, row.names=F)
	write.csv(s_data, s_table_name, row.names=F)
	write.csv(coef_table, parameters_name, row.names=T)	
	write.csv(w_data, auc_name, row.names=F)
	write.csv(z_data, "mean_all.csv", row.names=F)
	write.csv(predictions_sum, "prediction_table_all.csv", row.names = F)
	write.csv(predictions_spe_sum, "prediction_table_spe.csv", row.names = F)
}
