
# the function for Lasso analysis

Lasso_Loo <- function(file_name){
	
	##### library import #####
	
	library(glmnet)
	library(tidyverse)
	library(pROC)
	
	##### data import #####
	
	all <- read.csv(file_name, header = T)
	
	positive_all  <- all %>% dplyr::filter(Gene_type == "T")
	negative_all  <- all %>% dplyr::filter(Gene_type == "FP")
	## number of sample
	
	n_data  <- nrow(positive_all) 	  # number of data
	
	##### preparing and deciding values #####
	
	a_data <- data.frame(matrix(rep(NA, 6), nrow=1))[numeric(0), ]　# vacant data.frame
	colnames(a_data) <- c("Gene_ID", 
					  "ED",
					  "ida",
					  "estimate",
					  "probabil",
					  "times")
	
	lasso <- 1.0
	
	##### making train and test data #####
	
	## data making
	
	positive_ordered  <- positive_all[order(positive_all$ED, decreasing = T),] %>% dplyr::slice(1:n_data)
	positive <- positive_ordered %>% dplyr::select(-Gene_ID, -ED)
	
	negative_ordered  <- negative_all[order(negative_all$ED),] %>% dplyr::slice(1:n_data)
	negative <- negative_ordered %>% dplyr::select(-Gene_ID, -ED)
	
	all_data <- rbind(positive, negative)
	
	##### Cross-validation #####
	
	for (g in 1:10){
		
		times <- g
		
		positive <- positive_ordered[sample(n_data, n_data),]
		negative <- negative_ordered[sample(n_data, n_data),]
		
		for (i in 1:n_data) {
			
			train_p <- positive[-i,] ## extract the data one by one
			valid_p <- positive[i,]
			train_n <- negative[-i,]
			valid_n <- negative[i,]
			train  <- rbind(train_p, train_n)
			valid  <- rbind(valid_p, valid_n)
			
			Gene_ID <- valid %>% dplyr::select(Gene_ID)　## for law data
			ED <- valid %>% dplyr::select(ED)           ## for law data
			
			trainX  <- train %>% dplyr::select(-Gene_ID, -Gene_type, -ED) %>% as.matrix()
			validX  <- valid %>% dplyr::select(-Gene_ID, -Gene_type, -ED) %>% as.matrix()
			
			trainY  <- rep(1:0, each = (n_data-1))
			validY  <- rep(1:0, each = 1)
			
			## deside lamda value ##
			
			cv <- cv.glmnet (trainX
					,trainY
					,family	 = "binomial"
					,alpha	 = lasso
					,nlambda = 100
					,nfolds	 = 10
					,grouped = FALSE)
			
			## construct model in each ##
			
			model <- glmnet(trainX
					,trainY
					,family	 = "binomial"
					,alpha	 = lasso
					,lambda  = cv$lambda.min)
			
			estimate <- data.frame(predict(model, validX, s = "lambda.min", type="class"))　## for law data, estimate
			names(estimate) <- "estimate" ## for law data, estimate
			ida <- validY　## for law data, original data
			probabil <- data.frame(predict(model, validX, s = "lambda.min",type="response"))
			names(probabil) <- "probabil"
			
			AAA <- data.frame("Gene_ID"  = Gene_ID,
						  "ED"       = ED, 
						  "ida"      = ida, 
						  "estimate" = estimate,
						  "probabil" = probabil,
						  "times"	 = g)
			
			a_data <- a_data %>% rbind(AAA)
			
			intercept <- model$a0
			value     <- as.matrix(model$beta)
			beta_data <- rbind(intercept, value)
			beta      <- matrix(beta_data, nrow = 1, ncol = nrow(beta_data))
			colnames(beta) <- rownames(as.matrix(beta_data))
			
			if (i == 1) {
				sum_beta <- beta
			
			}else{
				sum_beta <- sum_beta %>% rbind(beta)
			}
		}
		
		if (g == 1) {
			sum_beta_sum <- sum_beta
		
		}else{
			sum_beta_sum <- sum_beta_sum %>% rbind(sum_beta)
		}
		
	}
	
	answer <- matrix(0, nrow = nrow(a_data), ncol=1) 
	
	for (j in 1:nrow(a_data)){

		if(a_data[j,3] == a_data[j,4]) {
			answer[j,1] <- 1
			
		}else{
			answer[j,1] <- 0
		}
	}
	
	average <- mean(answer)
	
	answer <- rbind(answer,"average",average)
	
	write.csv(answer, "answer.csv", row.names=F)
	write.csv(a_data, "glmnet_cross_validation.csv", row.names=F)
	write.csv(sum_beta_sum,"glmnet_sum_beta.csv",row.names=F)
	
}

## How do you use this function

# set your directory
setwd(directory)

# choose the file you want to analysis
Lasso_Loo(file name)
